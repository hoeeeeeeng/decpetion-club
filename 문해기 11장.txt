1.
#pragma warning (disable : 4996)
#include <stdio.h>
#define NUM_RANKS 13
#define NUM_SUITS 4
#define NUM_CARDS 5

typedef struct overlap {
	int rank;
	int suit;
}overlap;

int num_in_rank[NUM_RANKS + 1];
int num_in_suit[NUM_SUITS];
int check_flush();
int check_straight();
int count_pairs();
int check_four_cards();
int check_three_cards();
void read_cards();
void analyze_hand();
void init_data();

int main(void) 
{
	while (1) {
		read_cards();
		analyze_hand();
	}
}
void init_data() {
	int rank, suit;
	for (rank = 0; rank < NUM_RANKS; rank++)
		num_in_rank[rank] = 0;
	for (suit = 0; suit < NUM_SUITS; suit++)
		num_in_suit[suit] = 0;
}
void read_cards() { // 카드 입력 받기
	overlap overlap[5];

	int o = 0;
	char rank_ch, suit_ch;
	int rank, suit;
	init_data(); // 초기화 해주기
	int  cards_read = 0; // 카드 입력받은 수

	while (cards_read < NUM_CARDS) { //5장의 카드 입력 받기
		int is_overlap = 0;

		printf("카드를 입력하시오 : ");

		scanf(" %c", &rank_ch); // rank 정보 받기
		switch (rank_ch) {
		case 'a':rank = 1; break;
		case '2':rank = 2; break;
		case '3':rank = 3; break;
		case '4':rank = 4; break;
		case '5':rank = 5; break;
		case '6':rank = 6; break;
		case '7':rank = 7; break;
		case '8':rank = 8; break;
		case '9':rank = 9; break;
		case 't':rank = 10; break;
		case 'j':rank = 11; break;
		case 'q':rank = 12; break;
		case 'k':rank = 13; break;
		default:rank = -1;
			printf("잘못된 숫자입니다. 다시 입력하십시오 \n");
		}
		overlap[o].rank = rank;

		scanf(" %c", &suit_ch); // suit 정보 받기 

		switch (suit_ch) {
		case 'c':suit = 0; break;
		case 'd':suit = 1; break;
		case 'h':suit = 2; break;
		case 's':suit = 3; break;
		default:suit = -1;
			printf("잘못된 패턴입니다. 다시 입력하십시오 \n");
		}
		overlap[o].suit = suit;

		for (int i = 0; i < cards_read; i++) {
			if (overlap[i].rank == rank && overlap[i].suit == suit) {
				printf("중복된 카드입니다. 다시 입력하십시오 \n");
				is_overlap = 1;
			}
		}

		num_in_rank[rank]++;
		num_in_suit[suit]++;
		cards_read++;
		o++;

		if (is_overlap == 1) {
			num_in_rank[rank]--;
			num_in_suit[suit]--;
			cards_read--;
			o--;
		}
		if (rank == -1) {
			num_in_rank[rank]--;
			num_in_suit[suit]--;
			cards_read--;
			o--;
		}
		else if (suit == -1) {
			num_in_rank[rank]--;
			num_in_suit[suit]--;
			cards_read--;
			o--;
		}
	}
}

int check_flush() {
	for (int i = 0; i < NUM_SUITS; i++) {
		if (num_in_suit[i] == 5)
			return 1;
	}
	return 0;
}
int check_straight() {
	int cnt = 0;
	for (int i = 1; i < NUM_RANKS + 1; i++) {
		if (num_in_rank[i] == 1) {
			cnt++;
			if (cnt == 5)
				return 1;
		}
		else
			cnt = 0;
	}
	return 0;
}

int count_pairs() {
	int cnt = 0;
	for (int i = 1; i < NUM_RANKS + 1; i++) {
		if (num_in_rank[i] == 2)
			cnt++;
	}
	if (cnt == 2)
		return 2;
	else if (cnt == 1)
		return 1;
	else
		return 0;
}

int check_four_cards() {
	for (int i = 1; i < NUM_RANKS + 1; i++) {
		if (num_in_rank[i] == 4)
			return 1;
	}
	return 0;
}
int check_three_cards() {
	for (int i = 1; i < NUM_RANKS + 1; i++) {
		if (num_in_rank[i] == 3)
			return 1;
	}
	return 0;
}

void analyze_hand() {
	int is_flush = check_flush();
	int is_straight = check_straight();
	int how_many_pairs = count_pairs();
	int is_four_cards = check_four_cards();
	int is_three_cards = check_three_cards();

	if (is_flush == 1 && is_straight == 1) {
		printf("Straight Flush \n");
		return;
	}
	else if (is_four_cards == 1) {
		printf("Four Cards \n");
		return;
	}
	else if (is_three_cards == 1 && how_many_pairs == 1) {
		printf("Full House \n");
		return;
	}
	else if (is_flush == 1) {
		printf("Flush \n");
		return;
	}
	else if (is_straight == 1) {
		printf("Straight \n");
		return;
	}
	else if (is_three_cards == 1) {
		printf("Triple \n");
		return;
	}
	else if (how_many_pairs == 2) {
		printf("Two Pairs \n");
		return;
	}
	else if (how_many_pairs == 1) {
		printf("Pair \n");
		return;
	}
	printf("High Card \n");
}

2.
#pragma warning(disable:4996)
#include <stdio.h>
#define MAX 100

void gauss_eli();

int main(void)
{
	gauss_eli();

	return 0;
}

void gauss_eli()
{
	int n, i = 0, j = 0;
	double A[MAX][MAX]; //계수 행렬
	double b[MAX], x[MAX]; // 상수
	double matrix[MAX];
	FILE *fp = fopen("data.txt", "r");
	fscanf(fp, "%d", &n);

	while (fscanf(fp, "%lf", &A[i][j]) != EOF) {
		for (int j = 1; j < n; j++)
			fscanf(fp, "%lf", &A[i][j]);
		fscanf(fp, "%lf", &b[i]);
		i++;
	}

	for (int k = 0; k <= n - 2; k++) { // 행
		double inverse = A[k][k];
		for (int p = k + 1; p <= n - 1; p++) { // 계산처리를 해줄 바로 그 해당 행
			double multi = A[p][k] / inverse;
			for (int q = 0; q < n; q++) { // 계산해주기 (multi 행렬완성)
				matrix[q] = -(A[k][q] * multi);
			}
			matrix[n] = -(b[k] * multi);

			for (int q = 0; q < n; q++) {
				A[p][q] += matrix[q];
			}
			b[p] += matrix[n];
		}
	}

	int empty = 0;
	for (int q = 0; q < n; q++) {
		if (A[n - 1][q] != 0)
			empty++;
	}
	int b_emt = 0;
	if (b[n - 1] != 0)
		b_emt++;

	if (empty == 0) {
		if (b_emt == 0)
			printf("Infinite solution\n");
		else
			printf("No solution\n");
	}
	else {
		x[n - 1] = b[n - 1] / A[n - 1][n - 1];

		for (int q = n - 2; q >= 0; q--) { //올라갈수록 변수가 하나씩 는다 //현재의 행
			x[q] = b[q]; // 초기값
			for (int u = q + 1; u < n; u++) { //u는 현재 열
				x[q] -= (A[q][u] * x[u]);
			}
			x[q] /= A[q][q];
		}
		for (int q = 0; q < n; q++) {
			printf("x%d = %lf\n", q + 1, x[q]);
		}
	}

	return 0;
}