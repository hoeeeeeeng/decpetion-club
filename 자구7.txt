7.
main
#include<stdio.h>
#include <string.h>
#include <stdlib.h>
#include "string_tools.h"
#include "library.h"
#define BUFFER_LENGTH 200

void process_command();
void handle_search();
void handle_add();
void handle_load();
void handle_play();
void handle_save();
void handle_remove();

int main(void)
{
	initialize();
	handle_load();
	process_command();

	return 0;
}

void handle_load() {
	char buffer[BUFFER_LENGTH];
	printf("Data file name? ");
	if (read_line(stdin, buffer, BUFFER_LENGTH) <= 0)
		return;
	FILE *fp = fopen(buffer, "r");
	if (fp == NULL) {
		printf("No such file exists.\n");
		return;
	}

	load(fp);
	fclose(fp);
}

void process_command() {
	char command_line[BUFFER_LENGTH];
	char *command;

	while (1) {
		printf("$ ");

		if (read_line(stdin, command_line, BUFFER_LENGTH) <= 0)
			continue;

		command = strtok(command_line, " ");

		if (strcmp(command, "add") == 0)
			handle_add();
		else if (strcmp(command, "search") == 0)
			handle_search();
		else if (strcmp(command, "play") == 0)
			handle_play();
		else if (strcmp(command, "save") == 0) {
			char *tmp = strtok(NULL, " ");
			if (strcmp(tmp, "as") != 0) {
				continue;
			}
			handle_save();
		}
		else if (strcmp(command, "remove") == 0)
			handle_remove();
		else if (strcmp(command, "status") == 0)
			status();
		else if (strcmp(command, "exit") == 0)
			break;
	}
}

void handle_remove() {
	char *id_str = strtok(NULL, " ");
	int index = atoi(id_str);
	remove(index);
}

void handle_save() {
	char *file_name = strtok(NULL, " ");
	FILE *fp = fopen(file_name, "w");
	save(fp);
	fclose(fp);
}

void handle_play() {
	char *id_str = strtok(NULL, " ");
	int index = atoi(id_str);
	play(index);
}

void handle_search() {
	char name[BUFFER_LENGTH], title[BUFFER_LENGTH];
	printf("	Artist: ");
	if (read_line(stdin, name, BUFFER_LENGTH) <= 0) {
		printf("	Artist name required.\n");
		return;
	}

	printf("	Title: ");
	int title_len = read_line(stdin, title, BUFFER_LENGTH);

	if (title_len <= 0)
		search_song(name);
	else
		search_song(name, title);
}

void handle_add() {
	char buffer[BUFFER_LENGTH];
	char *artist = NULL, *title = NULL, *path = NULL;

	printf("    Artist: ");
	if (read_line(stdin, buffer, BUFFER_LENGTH) > 0)
		artist = strdup(buffer);

	printf("    title: ");
	if (read_line(stdin, buffer, BUFFER_LENGTH) > 0)
		title = strdup(buffer);

	printf("    path: ");
	if (read_line(stdin, buffer, BUFFER_LENGTH) > 0)
		path = strdup(buffer);

	printf("%s %s %s\n", artist, title, path);

	add_song(artist, title, path);
}

string_tools
#include<stdio.h>
#include"string_tools.h"
int read_line(FILE *fp, char str[], int n)
{
	int ch, i = 0;
	while ((ch = fgetc(fp)) != '\n' && ch != EOF)
		if (i<n - 1)
			str[i++] = ch;
	str[i] = '\0';
	return i;
}

library
#include "library.h"
#include "string_tools.h"
#include<stdio.h>
#include<Windows.h>

#define NUM_CHARS 256 // 2^8 한바이트가 가질수있는 모든 서로 다른값.
#define BUFFER_LENGTH 200
#define SIZE_INDEX_TABLE 100

Artist* artist_directory[NUM_CHARS];
Snode* index_directory[SIZE_INDEX_TABLE];
int num_index = 0;

void print_artist(Artist * p);
void insert_node(Artist* ptr_artist, Snode* ptr_snode);
Artist* find_artist(char *name);
void print_song(Song* ptr_song);
Snode * find_snode(Artist * ptr_artist, char * title);
void insert_to_index_directory(Song * ptr_song);
void save_song(Song *ptr_song, FILE *fp);
void save_artist(Artist * p, FILE * fp);
void remove_snode(Artist * ptr_artist, Snode * ptr_snode);
void destroy_song(Song * ptr_song);

void initialize() { 
	for (int i = 0; i < NUM_CHARS; i++)
		artist_directory[i] = NULL;

	for (int i = 0; i < SIZE_INDEX_TABLE; i++)
		index_directory[i] = NULL;
}

void load(FILE * fp) {
	char buffer[BUFFER_LENGTH];
	char *name, *title, *path;

	while (1) { // infinite loop
		if (read_line(fp, buffer, BUFFER_LENGTH) <= 0)
			break;

		name = strtok(buffer, "#");
		if (strcmp(name, " ") == 0)
			name = NULL;
		else
			name = strdup(name);
		title = strtok(NULL, "#");
		if (strcmp(title, " ") == 0)
			title = NULL;
		else
			title = strdup(title);

		path = strtok(NULL, "#");
		if (strcmp(path, " ") == 0)
			path = NULL;
		else
			path = strdup(path);

		add_song(name, title, path);
	}
}
void search_song(char *artist, char * title) {
	Artist * ptr_artist = find_artist(artist);
	if (ptr_artist == NULL) {
		printf("No such artist exists.\n");
		return;
	}

	Snode *ptr_snode = find_snode(ptr_artist, title);

	if (ptr_snode != NULL) {
		printf("Found:\n");
		print_song(ptr_snode->song);
	}
	else {
		printf("No such Song exists.\n");
		return;
	}
}

Snode * find_snode(Artist * ptr_artist, char * title) {

	Snode *ptr_snode = ptr_artist->head;

	while (ptr_snode != NULL && strcmp(ptr_snode->song->title, title) < 0) {
		ptr_snode = ptr_snode->next;
	}

	if (ptr_snode != NULL && strcmp(ptr_snode->song->title, title) == 0)
		return ptr_snode;
	else
		return NULL;
}

void search_song(char *artist) {
	Artist * ptr_artist = find_artist(artist);
	if (ptr_artist == NULL) {
		printf("No such artist exists.\n");
		return;
	}

	printf("Found:\n");
	print_artist(ptr_artist);
}

Artist *create_artist_instance(char *name) {
	Artist *ptr_artist = (Artist *)malloc(sizeof(Artist));
	ptr_artist->name = name;
	ptr_artist->head = NULL;
	ptr_artist->next = NULL;
	ptr_artist->tail = NULL;

	return ptr_artist;
}

Artist *add_artist(char *name) {

	Artist *ptr_artist = create_artist_instance(name);

	Artist *p = artist_directory[(unsigned char)name[0]]; 
	Artist *q = NULL;

	while (p != NULL && strcmp(p->name, name) < 0) {
		q = p;
		p = p->next;
	}

	if (p == NULL && q == NULL) { 
		artist_directory[(unsigned char)name[0]] = ptr_artist;
	}

	else if (q == NULL) { 
		ptr_artist->next = artist_directory[(unsigned char)name[0]];
		artist_directory[(unsigned char)name[0]] = ptr_artist;
	}
	else { 
		ptr_artist->next = p;
		q->next = ptr_artist;
	}
	return ptr_artist;
}

Song * create_song_instance(Artist* ptr_artist, char * title, char * path) {
	Song *ptr_song = (song*)malloc(sizeof(Song));

	ptr_song->artist = ptr_artist;
	ptr_song->title = title;
	ptr_song->path = path;
	ptr_song->index = num_index;
	num_index++;

	return ptr_song;
}

void add_song(char* artist, char * title, char *path) {

	Artist *ptr_artist = find_artist(artist);

	if (ptr_artist == NULL) {
		ptr_artist = add_artist(artist);
	}

	Song *ptr_song = create_song_instance(ptr_artist, title, path);
	Snode *ptr_snode = (snode *)malloc(sizeof(Snode));
	ptr_snode->song = ptr_song;
	ptr_snode->next = NULL;
	ptr_snode->pev = NULL;

	insert_node(ptr_artist, ptr_snode);
	insert_to_index_directory(ptr_song);
}

void insert_to_index_directory(Song * ptr_song) {
	Snode *ptr_snode = (snode *)malloc(sizeof(Snode));
	ptr_snode->song = ptr_song;
	ptr_snode->next = NULL;
	ptr_snode->pev = NULL;

	int index = ptr_song->index % SIZE_INDEX_TABLE;

	Snode *p = index_directory[index];
	Snode *q = NULL;
	while (p != NULL && strcmp(p->song->title, ptr_song->title) < 0) {
		q = p;
		p = p->next;
	}

	if (q == NULL) {
		ptr_snode->next = p;
		index_directory[index] = ptr_snode;
	}

	else {
		ptr_snode->next = p;
		q->next = ptr_snode;
	}
}

void insert_node(Artist* ptr_artist, Snode* ptr_snode) {
	Snode*p = ptr_artist->head;
	while (p != NULL && strcmp(p->song->title, ptr_snode->song->title) < 0) {
		p = p->next;
	}

	if (ptr_artist->head == NULL) {
		ptr_artist->head = ptr_snode;
		ptr_artist->tail = ptr_snode;
	}

	else if (p == ptr_artist->head) {
		ptr_snode->next = ptr_artist->head;
		ptr_artist->head->pev = ptr_snode;
		ptr_artist->head = ptr_snode;
	}

	else if (p == NULL) {
		ptr_snode->pev = ptr_artist->tail;
		ptr_artist->tail->next = ptr_snode;
		ptr_artist->tail = ptr_snode;
	}
	else {
		ptr_snode->next = p;
		ptr_snode->pev = p->pev;
		p->pev->next = ptr_snode;
		p->pev = ptr_snode;
	}
}


Artist* find_artist(char *name) {
	Artist*p = artist_directory[(unsigned char)name[0]];

	while (p != NULL && strcmp(p->name, name) < 0)
		p = p->next;

	if (p != NULL && strcmp(p->name, name) == 0)
		return p;
	else
		return NULL;
}

void status() {
	for (int i = 0; i < NUM_CHARS; i++) {
		Artist* p = artist_directory[i];
		while (p != NULL) {
			print_artist(p);
			p = p->next;
		}
	}
}

void print_artist(Artist * p) {
	printf("%s \n", p->name);
	Snode * ptr_snode = p->head;
	while (ptr_snode != NULL) {
		print_song(ptr_snode->song);
		ptr_snode = ptr_snode->next;
	}
}

void print_song(Song* ptr_song) {
	printf("   %d: %s, %s\n", ptr_song->index, ptr_song->title, ptr_song->path);
}
Snode * find_song(int index) {
	Snode * ptr_snode = index_directory[index % SIZE_INDEX_TABLE];
	while (ptr_snode != NULL && ptr_snode->song->index != index)
		ptr_snode = ptr_snode->next;
	return ptr_snode;
}

void play(int index) {
	Snode * ptr_snode = find_song(index);
	if (ptr_snode == NULL) {
		printf("No such song exists.\n");
	}
	printf("Found the song: %s\n", ptr_snode->song->title);

	ShellExecuteA(GetDesktopWindow(), "open", ptr_snode->song->path, NULL, NULL, SW_SHOW);

}

void save(FILE *fp) {
	for (int i = 0; i < NUM_CHARS; i++) {
		Artist* p = artist_directory[i];
		while (p != NULL) {
			save_artist(p, fp);
			p = p->next;
		}
	}
}

void save_artist(Artist * p, FILE * fp) {
	Snode * ptr_snode = p->head;
	while (ptr_snode != NULL) {
		save_song(ptr_snode->song, fp);
		ptr_snode = ptr_snode->next;
	}
}

void save_song(Song *ptr_song, FILE *fp) {
	if (ptr_song->artist != NULL)
		fprintf(fp, "%s#", ptr_song->artist->name);
	else
		fprintf(fp, " #");


	if (ptr_song->title != NULL)
		fprintf(fp, "%s#", ptr_song->title);
	else
		fprintf(fp, " #");

	if (ptr_song->path != NULL)
		fprintf(fp, "%s#\n", ptr_song->path);
	else
		fprintf(fp, " #\n");
}

void remove(int index) {
	Snode * q = NULL;							
	Snode * p = index_directory[index % SIZE_INDEX_TABLE];

	while (p != NULL && p->song->index != index) {
		q = p;
		p = p->next;
	}

	if (p == NULL) { 
		printf("No such song exists.\n");
		return;
	}
	Song * ptr_song = p->song;
	if (q == NULL) {	
		index_directory[index % SIZE_INDEX_TABLE] = p->next;

	}
	else {
		q->next = p->next; //q->next = q->next->next;
	}
	free(p);

	Artist * ptr_artist = ptr_song->artist;

	Snode * ptr_snode = find_snode(ptr_artist, ptr_song->title);
	if (ptr_snode == NULL) {
		printf("Not found snode - something wrong.\n");
		return;
	}

	remove_snode(ptr_artist, ptr_snode);
	destroy_song(ptr_song);
}

void destroy_song(Song * ptr_song) {
	if (ptr_song->title != NULL)
		free(ptr_song->title);
	if (ptr_song->path != NULL)
		free(ptr_song->path);
	free(ptr_song);
}

void remove_snode(Artist * ptr_artist, Snode * ptr_snode) {

	Snode * first = ptr_artist->head;
	Snode * last = ptr_artist->tail;

	if (first == ptr_snode && last == ptr_snode) {	
		ptr_artist->head = NULL;
		ptr_artist->tail = NULL;
	}

	else if (first == ptr_snode) { 
		ptr_artist->head = ptr_snode->next;
		ptr_snode->next->pev = NULL;
	}
	else if (last == ptr_snode) { 
		ptr_artist->tail = ptr_snode->pev;
		ptr_snode->pev->next = NULL;
	}

	else {	
		ptr_snode->pev->next = ptr_snode->next;
		ptr_snode->next->pev = ptr_snode->pev;
	}

	free(ptr_snode);
}

string_tools.h
#include "library.h"
#include "string_tools.h"
#include<stdio.h>
#include<Windows.h>

#define NUM_CHARS 256 // 2^8 한바이트가 가질수있는 모든 서로 다른값.
#define BUFFER_LENGTH 200
#define SIZE_INDEX_TABLE 100

Artist* artist_directory[NUM_CHARS];
Snode* index_directory[SIZE_INDEX_TABLE];
int num_index = 0;

void print_artist(Artist * p);
void insert_node(Artist* ptr_artist, Snode* ptr_snode);
Artist* find_artist(char *name);
void print_song(Song* ptr_song);
Snode * find_snode(Artist * ptr_artist, char * title);
void insert_to_index_directory(Song * ptr_song);
void save_song(Song *ptr_song, FILE *fp);
void save_artist(Artist * p, FILE * fp);
void remove_snode(Artist * ptr_artist, Snode * ptr_snode);
void destroy_song(Song * ptr_song);

void initialize() { 
	for (int i = 0; i < NUM_CHARS; i++)
		artist_directory[i] = NULL;

	for (int i = 0; i < SIZE_INDEX_TABLE; i++)
		index_directory[i] = NULL;
}

void load(FILE * fp) {
	char buffer[BUFFER_LENGTH];
	char *name, *title, *path;

	while (1) { // infinite loop
		if (read_line(fp, buffer, BUFFER_LENGTH) <= 0)
			break;

		name = strtok(buffer, "#");
		if (strcmp(name, " ") == 0)
			name = NULL;
		else
			name = strdup(name);
		title = strtok(NULL, "#");
		if (strcmp(title, " ") == 0)
			title = NULL;
		else
			title = strdup(title);

		path = strtok(NULL, "#");
		if (strcmp(path, " ") == 0)
			path = NULL;
		else
			path = strdup(path);

		add_song(name, title, path);
	}
}
void search_song(char *artist, char * title) {
	Artist * ptr_artist = find_artist(artist);
	if (ptr_artist == NULL) {
		printf("No such artist exists.\n");
		return;
	}

	Snode *ptr_snode = find_snode(ptr_artist, title);

	if (ptr_snode != NULL) {
		printf("Found:\n");
		print_song(ptr_snode->song);
	}
	else {
		printf("No such Song exists.\n");
		return;
	}
}

Snode * find_snode(Artist * ptr_artist, char * title) {

	Snode *ptr_snode = ptr_artist->head;

	while (ptr_snode != NULL && strcmp(ptr_snode->song->title, title) < 0) {
		ptr_snode = ptr_snode->next;
	}

	if (ptr_snode != NULL && strcmp(ptr_snode->song->title, title) == 0)
		return ptr_snode;
	else
		return NULL;
}

void search_song(char *artist) {
	Artist * ptr_artist = find_artist(artist);
	if (ptr_artist == NULL) {
		printf("No such artist exists.\n");
		return;
	}

	printf("Found:\n");
	print_artist(ptr_artist);
}

Artist *create_artist_instance(char *name) {
	Artist *ptr_artist = (Artist *)malloc(sizeof(Artist));
	ptr_artist->name = name;
	ptr_artist->head = NULL;
	ptr_artist->next = NULL;
	ptr_artist->tail = NULL;

	return ptr_artist;
}

Artist *add_artist(char *name) {

	Artist *ptr_artist = create_artist_instance(name);

	Artist *p = artist_directory[(unsigned char)name[0]]; 
	Artist *q = NULL;

	while (p != NULL && strcmp(p->name, name) < 0) {
		q = p;
		p = p->next;
	}

	if (p == NULL && q == NULL) { 
		artist_directory[(unsigned char)name[0]] = ptr_artist;
	}

	else if (q == NULL) { 
		ptr_artist->next = artist_directory[(unsigned char)name[0]];
		artist_directory[(unsigned char)name[0]] = ptr_artist;
	}
	else { 
		ptr_artist->next = p;
		q->next = ptr_artist;
	}
	return ptr_artist;
}

Song * create_song_instance(Artist* ptr_artist, char * title, char * path) {
	Song *ptr_song = (song*)malloc(sizeof(Song));

	ptr_song->artist = ptr_artist;
	ptr_song->title = title;
	ptr_song->path = path;
	ptr_song->index = num_index;
	num_index++;

	return ptr_song;
}

void add_song(char* artist, char * title, char *path) {

	Artist *ptr_artist = find_artist(artist);

	if (ptr_artist == NULL) {
		ptr_artist = add_artist(artist);
	}

	Song *ptr_song = create_song_instance(ptr_artist, title, path);
	Snode *ptr_snode = (snode *)malloc(sizeof(Snode));
	ptr_snode->song = ptr_song;
	ptr_snode->next = NULL;
	ptr_snode->pev = NULL;

	insert_node(ptr_artist, ptr_snode);
	insert_to_index_directory(ptr_song);
}

void insert_to_index_directory(Song * ptr_song) {
	Snode *ptr_snode = (snode *)malloc(sizeof(Snode));
	ptr_snode->song = ptr_song;
	ptr_snode->next = NULL;
	ptr_snode->pev = NULL;

	int index = ptr_song->index % SIZE_INDEX_TABLE;

	Snode *p = index_directory[index];
	Snode *q = NULL;
	while (p != NULL && strcmp(p->song->title, ptr_song->title) < 0) {
		q = p;
		p = p->next;
	}

	if (q == NULL) {
		ptr_snode->next = p;
		index_directory[index] = ptr_snode;
	}

	else {
		ptr_snode->next = p;
		q->next = ptr_snode;
	}
}

void insert_node(Artist* ptr_artist, Snode* ptr_snode) {
	Snode*p = ptr_artist->head;
	while (p != NULL && strcmp(p->song->title, ptr_snode->song->title) < 0) {
		p = p->next;
	}

	if (ptr_artist->head == NULL) {
		ptr_artist->head = ptr_snode;
		ptr_artist->tail = ptr_snode;
	}

	else if (p == ptr_artist->head) {
		ptr_snode->next = ptr_artist->head;
		ptr_artist->head->pev = ptr_snode;
		ptr_artist->head = ptr_snode;
	}

	else if (p == NULL) {
		ptr_snode->pev = ptr_artist->tail;
		ptr_artist->tail->next = ptr_snode;
		ptr_artist->tail = ptr_snode;
	}
	else {
		ptr_snode->next = p;
		ptr_snode->pev = p->pev;
		p->pev->next = ptr_snode;
		p->pev = ptr_snode;
	}
}


Artist* find_artist(char *name) {
	Artist*p = artist_directory[(unsigned char)name[0]];

	while (p != NULL && strcmp(p->name, name) < 0)
		p = p->next;

	if (p != NULL && strcmp(p->name, name) == 0)
		return p;
	else
		return NULL;
}

void status() {
	for (int i = 0; i < NUM_CHARS; i++) {
		Artist* p = artist_directory[i];
		while (p != NULL) {
			print_artist(p);
			p = p->next;
		}
	}
}

void print_artist(Artist * p) {
	printf("%s \n", p->name);
	Snode * ptr_snode = p->head;
	while (ptr_snode != NULL) {
		print_song(ptr_snode->song);
		ptr_snode = ptr_snode->next;
	}
}

void print_song(Song* ptr_song) {
	printf("   %d: %s, %s\n", ptr_song->index, ptr_song->title, ptr_song->path);
}
Snode * find_song(int index) {
	Snode * ptr_snode = index_directory[index % SIZE_INDEX_TABLE];
	while (ptr_snode != NULL && ptr_snode->song->index != index)
		ptr_snode = ptr_snode->next;
	return ptr_snode;
}

void play(int index) {
	Snode * ptr_snode = find_song(index);
	if (ptr_snode == NULL) {
		printf("No such song exists.\n");
	}
	printf("Found the song: %s\n", ptr_snode->song->title);

	ShellExecuteA(GetDesktopWindow(), "open", ptr_snode->song->path, NULL, NULL, SW_SHOW);

}

void save(FILE *fp) {
	for (int i = 0; i < NUM_CHARS; i++) {
		Artist* p = artist_directory[i];
		while (p != NULL) {
			save_artist(p, fp);
			p = p->next;
		}
	}
}

void save_artist(Artist * p, FILE * fp) {
	Snode * ptr_snode = p->head;
	while (ptr_snode != NULL) {
		save_song(ptr_snode->song, fp);
		ptr_snode = ptr_snode->next;
	}
}

void save_song(Song *ptr_song, FILE *fp) {
	if (ptr_song->artist != NULL)
		fprintf(fp, "%s#", ptr_song->artist->name);
	else
		fprintf(fp, " #");


	if (ptr_song->title != NULL)
		fprintf(fp, "%s#", ptr_song->title);
	else
		fprintf(fp, " #");

	if (ptr_song->path != NULL)
		fprintf(fp, "%s#\n", ptr_song->path);
	else
		fprintf(fp, " #\n");
}

void remove(int index) {
	Snode * q = NULL;							
	Snode * p = index_directory[index % SIZE_INDEX_TABLE];

	while (p != NULL && p->song->index != index) {
		q = p;
		p = p->next;
	}

	if (p == NULL) { 
		printf("No such song exists.\n");
		return;
	}
	Song * ptr_song = p->song;
	if (q == NULL) {	
		index_directory[index % SIZE_INDEX_TABLE] = p->next;

	}
	else {
		q->next = p->next; //q->next = q->next->next;
	}
	free(p);

	Artist * ptr_artist = ptr_song->artist;

	Snode * ptr_snode = find_snode(ptr_artist, ptr_song->title);
	if (ptr_snode == NULL) {
		printf("Not found snode - something wrong.\n");
		return;
	}

	remove_snode(ptr_artist, ptr_snode);
	destroy_song(ptr_song);
}

void destroy_song(Song * ptr_song) {
	if (ptr_song->title != NULL)
		free(ptr_song->title);
	if (ptr_song->path != NULL)
		free(ptr_song->path);
	free(ptr_song);
}

void remove_snode(Artist * ptr_artist, Snode * ptr_snode) {

	Snode * first = ptr_artist->head;
	Snode * last = ptr_artist->tail;

	if (first == ptr_snode && last == ptr_snode) {	
		ptr_artist->head = NULL;
		ptr_artist->tail = NULL;
	}

	else if (first == ptr_snode) { 
		ptr_artist->head = ptr_snode->next;
		ptr_snode->next->pev = NULL;
	}
	else if (last == ptr_snode) { 
		ptr_artist->tail = ptr_snode->pev;
		ptr_snode->pev->next = NULL;
	}

	else {	
		ptr_snode->pev->next = ptr_snode->next;
		ptr_snode->next->pev = ptr_snode->pev;
	}

	free(ptr_snode);
}

library.h
#ifndef LIBRARY_H
#define LIBRARY_H

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

typedef struct song Song;
typedef struct snode Snode;
typedef struct artist Artist;

struct song {
	struct artist * artist;
	char *title;
	char *path;
	char index;
};

struct snode {
	struct snode * next, *pev;
	Song *song;
};

struct artist {
	char *name;
	struct artist * next;

	Snode *head, *tail;
};

void add_song(char* artist, char * title, char *path);
void initialize();
void status();
void search_song(char *artist, char * title);
void search_song(char *artist);
void load(FILE * fp);
void play(int index);
void save(FILE *fp);
void remove(int index);

#endif 