1.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#define MAX 100

void reverse();

int main(void)
{
	reverse();
}

void reverse()
{
	char str[MAX];
	int k;

	printf("문자열을 입력하시오 : ");
	scanf("%s", str);

	k = strlen(str);
	for (int i = k - 1; i >= 0; i--) {
		printf("%c", str[i]);
	}
	printf("\n");

}

2.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#define MAX 100

void alphabet_arr(char word[]);

int main(void)
{
	int word[MAX];
	printf("문자열을 입력하시오. :");
	scanf("%s", word);

	alphabet_arr(word);
}

void alphabet_arr(char word[])
{
	int len = strlen(word);

	for (int i = len - 1; i > 0; i--) {
		for (int j = 0; j < i; j++) {
			if (word[j] > word[j + 1]) {
				char tmp = word[j];
				word[j] = word[j + 1];
				word[j + 1] = tmp;
			}
		}
	}

	for (int i = 0; i < len; i++)
		printf("%c", word[i]);
}

3.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#define MAX 100

char anagram(char array[]);

int main(void)
{
	char a[MAX], b[MAX];
	
	printf("두 개의 문자열을 입력하시오 : ");
	scanf("%s %s", a, b);

	if (anagram(a) == anagram(b))
		printf("yes \n");
	else
		printf("no \n");
}

char anagram(char array[])
{
	int len = strlen(array);

	for (int i = len - 1; i > 0; i--) {
		for (int j = 0; j < i; j++) {
			if (array[j] >= 'A'&&array[j] <= 'Z')
				array[j] += 32;
			if (array[j] > array[j + 1]) {
				char tmp = array[j];
				array[j] = array[j + 1];
				array[j + 1] = tmp;
			}
		}
	}
	for (int i = 0; i < len; i++)
		return array[i];
}

/*
아스키코드
A~Z : 65~90
a~z : 97~122 (대문자 + 32)
*/

4.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#define MAX 100

void eighty_letters();

int main(void)
{
	eighty_letters();
}

void eighty_letters()
{
	FILE*in_fp = fopen("input.txt", "r");
	FILE*out_fp = fopen("output.txt", "w");

	char story[MAX];

	int len, sum = 0;

	while (fscanf(in_fp, "%s", story) != EOF) {
	    len = strlen(story) + 1;
		sum += len;

		if (sum <= 80) {
			fprintf(out_fp, "%s", story);
			if (sum < 80)
				fprintf(out_fp, " ");
		}
		else {
			fprintf(out_fp, "\n");
			fprintf(out_fp, "%s", story);
			sum = len + 1;
		}
	}
	fclose(in_fp);
	fclose(out_fp);
}

//input
the little hagletons all agreed that the old house was half a century something  
strange and horrible had happened something that the older inhabitants of the 
village still
liked to discuss when topics for gossip were the story had been picked over so 
many
and had been embroidered in so many that nobody was quite sure what the truth 
was every version of the started in the same fifty years at 
daybreak on a fine morning when the riddle house had still been well kept and 
a maid had entered the drawing room to find all three riddles

5.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#define MAX_WORD 4000
#define MAX_LEN 20
#define MAX 100

void read_dictionary();
void read_grid();
char get_char(int i, int j, int dir, int dist);
int search(int k);

char dict[MAX_WORD][MAX_LEN];
char grid[MAX_LEN][MAX_LEN];
char word[MAX];
int n_words, N;
int word_len;
int offsetX[] = { 0,1,1,1,0,-1,-1,-1 };
int offsetY[] = { -1,-1,0,1,1,1,0,-1 };

int main(void)
{
	read_dictionary();
	read_grid();

	
	for (int i = 0; i <= n_words; i++) {
		int result = search(i);
		
		if (result == 1)
			printf("%s\n", dict[i]);
	}
	return 0;
}

void read_dictionary()
{
	FILE*fp = fopen("dictionary.txt", "r");
	int i = 0;
	while (fscanf(fp, "%s", dict[i]) != EOF) 
		i++;
	n_words = i;
	
	fclose(fp);
}

void read_grid()
{
	FILE*fp = fopen("input.txt", "r");
	fscanf(fp, "%d", &N);
	for (int i = 0; i < N; i++)
		fscanf(fp, "%s", grid[i]);
	fclose(fp);
}

char get_char(int i, int j, int dir, int dist)
{
	int newX = i + dist * offsetX[dir];
	int newY = j + dist * offsetY[dir];
	if (newX < 0 || newX >= n_words || newY < 0 || newY >= n_words)
		return '\0';
	else
		return grid[newX][newY];
}

int search(int k)
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			word_len = strlen(dict[k]);
					
			if (grid[i][j] != dict[k][0])
				continue;

			for (int dir = 0; dir < 8; dir++) {
				int dist = 1;
				for (; dist < word_len; dist++) {
					char ch = get_char(i, j, dir, dist);
					if (ch == '\0' || ch != dict[k][dist])
						break;
				}
				if (dist >= word_len) {
					printf("Found at %d %d %d %d.\n", i, j, dir, dist);
					return 1;
				}
			}
		}
	}
	return 0;
}