1.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#define MAX_TERMS 100
#define MAX 100
#define BUFFER_SIZE 100

typedef struct term {         //하나의 항을 표현하는 구조체
	int coef;                 //계수
	int expo;                 //차수
}Term;

typedef struct polynomial {   //하나의 다항식을 표현하기 위한 구조체
	char name;                //f,g,h등의 다항식의 이름
	int nbr_terms;            //이 다항식을 구성하는 항의 개수
	Term terms[MAX_TERMS];
}Polynomial;

Polynomial polys[MAX];
int n = 0;

void create();
void add();
void mult();
void calc();
void print();
void diff();
void printall();
int search(char name);
void sort(int i);

int main(void)
{
	char buffer[BUFFER_SIZE];
	while (1) {
		printf("$ ");
		scanf("%s", buffer);
		if (strcmp(buffer, "create") == 0)
			create();
		else if (strcmp(buffer, "add") == 0)
			add();
		else if (strcmp(buffer, "mult") == 0)
			mult();
		else if (strcmp(buffer, "calc") == 0)
			calc();
		else if (strcmp(buffer, "print") == 0)
			print();
		else if (strcmp(buffer, "diff") == 0)
			diff();
		else if (strcmp(buffer, "printall") == 0)
			printall();
		else if (strcmp(buffer, "exit") == 0)
			break;
	}
	return 0;
}

void create() {
	char name;
	scanf(" %c", &name);

	if (search(name) != -1)
		printf("이름이 중복된 함수 존재\n");
	else {
		polys[n].name = name;
		polys[n].nbr_terms = 0;
		n++;
	}
}
void add() {
	char name;
	int coef, expo;
	int i, flag = 0;

	scanf(" %c", &name);
	scanf("%d %d", &coef, &expo);

	i = search(name);

	if (i != -1) {
		for (int j = 0; j < polys[i].nbr_terms; j++) {
			flag = 0;
			if (polys[i].terms[j].expo == expo) {
				polys[i].terms[j].coef += coef;
				flag = 1;
				break;
			}
		}
		if (flag == 0) {
			polys[i].terms[polys[i].nbr_terms].coef = coef;
			polys[i].terms[polys[i].nbr_terms].expo = expo;
			polys[i].nbr_terms++;
		}
	}
}
void mult() {
	char name;
	int multi;

	scanf(" %c", &name);
	scanf("%d", &multi);

	int i = search(name);
	if (i != -1) {
		sort(i);
		for (int j = 0; j < polys[i].nbr_terms; j++) {
			polys[i].terms[j].coef *= multi;
		}
	}

}
void calc() {
	char name;
	int value, ans = 0;
	int result = 1;

	scanf(" %c", &name);
	scanf("%d", &value);

	int i = search(name);
	if (i != -1) {
		for (int j = 0; j < polys[i].nbr_terms; j++) {
			result = 1;
			for (int k = 0; k < polys[i].terms[j].expo; k++) {
				result *= value;
			}
			result *= polys[i].terms[j].coef;
			ans += result;
		}
	}
	printf("%d\n", ans);

}
void print() {
	char name;
	scanf(" %c", &name);

	int i = search(name);
	sort(i);
	if (i != -1) {
		for (int j = 0; j < polys[i].nbr_terms; j++) {
			if (j != polys[i].nbr_terms - 1) {
				if (polys[i].terms[j + 1].coef > 0)
					printf("%dx^%d + ", polys[i].terms[j].coef, polys[i].terms[j].expo);
				else if (polys[i].terms[j + 1].coef < 0)
					printf("%dx^%d ", polys[i].terms[j].coef, polys[i].terms[j].expo);
			}
			else if (j == polys[i].nbr_terms - 1)
				printf("%dx^%d", polys[i].terms[j].coef, polys[i].terms[j].expo);
		}
		printf("\n");
	}
}
void diff() {
	char name1;
	char as[BUFFER_SIZE];
	scanf(" %c", &name1);
	scanf("%s", as);
	create();

	int i = search(name1);
	sort(i);

	if (i != -1) {
		if (polys[i].terms[polys[i].nbr_terms - 1].expo == 0) {
			for (int h = 0; h < polys[i].nbr_terms - 1; h++) {
				polys[n - 1].terms[h].coef = polys[i].terms[h].coef * polys[i].terms[h].expo;
				polys[n - 1].terms[h].expo = polys[i].terms[h].expo - 1; polys[n - 1].nbr_terms++;
			}
		}
		else if (polys[i].terms[polys[i].nbr_terms - 1].expo > 0) {
			for (int h = 0; h < polys[i].nbr_terms; h++) {
				polys[n - 1].terms[h].coef = polys[i].terms[h].coef * polys[i].terms[h].expo;
				polys[n - 1].terms[h].expo = polys[i].terms[h].expo - 1; polys[n - 1].nbr_terms++;
			}
		}
	}

}
void printall() {
	for (int i = 0; i < n; i++) {
		sort(i);
		printf("%c(x) = ", polys[i].name);
		for (int j = 0; j < polys[i].nbr_terms; j++) {
			if (j != polys[i].nbr_terms - 1) {
				if (polys[i].terms[j + 1].coef > 0)
					printf("%dx^%d + ", polys[i].terms[j].coef, polys[i].terms[j].expo);
				else if (polys[i].terms[j + 1].coef < 0)
					printf("%dx^%d ", polys[i].terms[j].coef, polys[i].terms[j].expo);
			}
			else if (j == polys[i].nbr_terms - 1)
				printf("%dx^%d", polys[i].terms[j].coef, polys[i].terms[j].expo);
		}
		printf("\n");
	}
}
int search(char name) {
	int i;
	for (i = 0; i < n; i++) {
		if (name == polys[i].name)
			return i;
	}return -1;
}
void sort(int i) {
	char name;
	Term tmp;

	if (i != -1) {
		for (int j = 0; j < polys[i].nbr_terms; j++) {
			for (int k = 0; k < polys[i].nbr_terms - 1; k++) {
				if (polys[i].terms[j].expo > polys[i].terms[k].expo) {
					tmp = polys[i].terms[j];
					polys[i].terms[j] = polys[i].terms[k];
					polys[i].terms[k] = tmp;
				}
			}
		}
	}
}
}

2.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX_TERMS 100
#define MAX 100
#define BUFFER_SIZE 100

typedef struct term {         //하나의 항을 표현하는 구조체
	int coef;                 //계수
	int expo;                 //차수
}Term;

typedef struct polynomial {   //하나의 다항식을 표현하기 위한 구조체
	char name;                //f,g,h등의 다항식의 이름
	int nbr_terms;            //이 다항식을 구성하는 항의 개수
	Term *terms[MAX_TERMS];
}Polynomial;

Polynomial *polys[MAX];
int n = 0;

void create();
void add();
void mult();
void calc();
void print();
void diff();
void printall();
int search(char name);
void sort(int i);

int main(void)
{
	char buffer[BUFFER_SIZE];
	while (1) {
		printf("$ ");
		scanf("%s", buffer);
		if (strcmp(buffer, "create") == 0)
			create();
		else if (strcmp(buffer, "add") == 0)
			add();
		else if (strcmp(buffer, "mult") == 0)
			mult();
		else if (strcmp(buffer, "calc") == 0)
			calc();
		else if (strcmp(buffer, "print") == 0)
			print();
		else if (strcmp(buffer, "diff") == 0)
			diff();
		else if (strcmp(buffer, "printall") == 0)
			printall();
		else if (strcmp(buffer, "exit") == 0)
			break;
	}
	for (int i = 0; i <sizeof(polys) / sizeof(Polynomial*); i++)
		free(polys[i]);

	return 0;
}

void create() {
	char name;
	scanf(" %c", &name);
	if (search(name) != -1)
		printf("이름이 중복된 함수 존재\n");
	else {
		polys[n] = (Polynomial*)malloc(sizeof(Polynomial));
		polys[n]->name = name;
		polys[n]->nbr_terms = 0;
		n++;
	}
}
void add() {
	char name;
	int coef, expo;
	int i, flag = 0;

	scanf(" %c", &name);
	scanf("%d %d", &coef, &expo);

	i = search(name);

	if (i != -1) {
		for (int j = 0; j < polys[i]->nbr_terms; j++) {
			flag = 0;
			if (polys[i]->terms[j]->expo == expo) {
				polys[i]->terms[j]->coef += coef;
				flag = 1;
				break;
			}
		}
		if (flag == 0) {
			polys[i]->terms[polys[i]->nbr_terms] = (Term*)malloc(sizeof(Term));
			polys[i]->terms[polys[i]->nbr_terms]->coef = coef;
			polys[i]->terms[polys[i]->nbr_terms]->expo = expo;
			polys[i]->nbr_terms++;
		}
	}
}
void mult() {
	char name;
	int multi;

	scanf(" %c", &name);
	scanf("%d", &multi);

	int i = search(name);
	if (i != -1) {
		sort(i);
		for (int j = 0; j < polys[i]->nbr_terms; j++) {
			polys[i]->terms[j]->coef *= multi;
		}
	}

}
void calc() {
	char name;
	int value, ans = 0;
	int result = 1;

	scanf(" %c", &name);
	scanf("%d", &value);

	int i = search(name);
	if (i != -1) {
		for (int j = 0; j < polys[i]->nbr_terms; j++) {
			result = 1;
			for (int k = 0; k < polys[i]->terms[j]->expo; k++) {
				result *= value;
			}
			result *= polys[i]->terms[j]->coef;
			ans += result;
		}
	}
	printf("%d\n", ans);

}
void print() {
	char name;
	scanf(" %c", &name);

	int i = search(name);
	sort(i);
	if (i != -1) {
		for (int j = 0; j < polys[i]->nbr_terms; j++) {
			if (j != polys[i]->nbr_terms - 1) {
				if (polys[i]->terms[j + 1]->coef > 0)
					printf("%dx^%d + ", polys[i]->terms[j]->coef, polys[i]->terms[j]->expo);
				else if (polys[i]->terms[j + 1]->coef < 0)
					printf("%dx^%d ", polys[i]->terms[j]->coef, polys[i]->terms[j]->expo);
			}
			else if (j == polys[i]->nbr_terms - 1)
				printf("%dx^%d", polys[i]->terms[j]->coef, polys[i]->terms[j]->expo);
		}
		printf("\n");
	}
}
void diff() {
	char name1;
	char as[BUFFER_SIZE];
	scanf(" %c", &name1);
	scanf("%s", as);
	create();

	int i = search(name1);
	sort(i);

	if (i != -1) {
		if (polys[i]->terms[polys[i]->nbr_terms - 1]->expo == 0) {
			for (int h = 0; h < polys[i]->nbr_terms - 1; h++) {
				polys[n - 1]->terms[h] = (Term*)malloc(sizeof(Term));
				polys[n - 1]->terms[h]->coef = polys[i]->terms[h]->coef * polys[i]->terms[h]->expo;
				polys[n - 1]->terms[h]->expo = polys[i]->terms[h]->expo - 1; polys[n - 1]->nbr_terms++;
			}
		}
		else if (polys[i]->terms[polys[i]->nbr_terms - 1]->expo > 0) {
			for (int h = 0; h < polys[i]->nbr_terms; h++) {
				polys[n - 1]->terms[h] = (Term*)malloc(sizeof(Term));
				polys[n - 1]->terms[h]->coef = polys[i]->terms[h]->coef * polys[i]->terms[h]->expo;
				polys[n - 1]->terms[h]->expo = polys[i]->terms[h]->expo - 1; polys[n - 1]->nbr_terms++;
			}
		}
	}
}
void printall() {
	for (int i = 0; i < n; i++) {
		sort(i);
		printf("%c(x) = ", polys[i]->name);
		for (int j = 0; j < polys[i]->nbr_terms; j++) {
			if (j != polys[i]->nbr_terms - 1) {
				if (polys[i]->terms[j + 1]->coef > 0)
					printf("%dx^%d + ", polys[i]->terms[j]->coef, polys[i]->terms[j]->expo);
				else if (polys[i]->terms[j + 1]->coef < 0)
					printf("%dx^%d + ", polys[i]->terms[j]->coef, polys[i]->terms[j]->expo);
			}
			else if (j == polys[i]->nbr_terms - 1)
				printf("%dx^%d", polys[i]->terms[j]->coef, polys[i]->terms[j]->expo);
		}
		printf("\n");
	}
}
int search(char name) {
	int i;
	for (i = 0; i < n; i++) {
		if (name == polys[i]->name)
			return i;
	}return -1;
}
void sort(int i) {
	char name;
	Term *tmp;

	if (i != -1) {
		for (int j = 0; j < polys[i]->nbr_terms; j++) {
			for (int k = 0; k < polys[i]->nbr_terms - 1; k++) {
				if (polys[i]->terms[j]->expo > polys[i]->terms[k]->expo) {
					tmp = polys[i]->terms[j];
					polys[i]->terms[j] = polys[i]->terms[k];
					polys[i]->terms[k] = tmp;
				}
			}
		}
	}
}