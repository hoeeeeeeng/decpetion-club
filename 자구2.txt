1.
#pragma warning(disable:4996)
#include <stdio.h>
#include<string.h>
#define MAX 100
int num[MAX];
int result(int count);
int num_sum[MAX]; int count_num = 0;
int main(void) 
{
	char string[MAX];
	gets(string);
	int cnt = 0;
	int sum = 0;
	for (int i = 0; i < strlen(string); i++) {

		if ('0' <= string[i] && string[i] <= '9') {
			num[cnt] = string[i] - '0'; cnt++;
			if (i == strlen(string) - 1) {
				sum += result(cnt);
			}
			else 
				continue;
		}
		else {
			if (cnt == 0)
				continue;
			else {
				sum += result(cnt);
				for (int h = 0; h < cnt; h++) num[h] = 0;
				cnt = 0; 
				continue;
			}
		}
	}
	for (int i = 0; i < count_num - 1; i++) {
		printf("%d + ", num_sum[i]);
	}printf("%d = %d\n", num_sum[count_num - 1], sum);
	return 0;

}
int result(int count) {
	int sum = 0, add = 0;
	for (int k = count - 1; k >= 0; k--) {
		int multi = 1;
		for (int j = 1; j <= (count - 1) - k; j++) {
			multi *= 10; add = num[k] * multi;
		} sum += add;
	}sum += num[count - 1]; num_sum[count_num] = sum; count_num++;
	return sum;
}


2.
#include <stdio.h>
#include <string.h>
#define CAPACITY 100
#define BUFFER_SIZE 20
char *names[CAPACITY];
char * numbers[CAPACITY];
int n = 0;
void add();
void find();
void status();
void remove();
void load();
void save();
void findall();
void deleteall();
int search(char *name);
int main() {
	char buffer[BUFFER_SIZE];
	while (1) {
		printf("$");
		scanf("%s", buffer);
		if (strcmp(buffer, "read") == 0)
			load();
		else if (strcmp(buffer, "add") == 0)
			add();
		else if (strcmp(buffer, "find") == 0)
			find();
		else if (strcmp(buffer, "status") == 0)
			status();
		else if (strcmp(buffer, "delete") == 0)
			remove();
		else if (strcmp(buffer, "save") == 0)
			save();
		else if (strcmp(buffer, "findall") == 0)
			findall();
		else if (strcmp(buffer, "deleteall") == 0)
			deleteall();
		else if (strcmp(buffer, "exit") == 0)
			break;
	}
	return 0;
}
void load() {
	char fileName[BUFFER_SIZE];
	char buf1[BUFFER_SIZE];
	char buf2[BUFFER_SIZE];

	scanf("%s", fileName);
	FILE*fp = fopen(fileName, "r");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
	}
	while ((fscanf(fp, "%s", buf1) != EOF)) {
		fscanf(fp, "%s", buf2);
		names[n] = strdup(buf1);
		numbers[n] = strdup(buf2);
		n++;
	}fclose(fp);
}
void save() {
	int i;
	char fileName[BUFFER_SIZE];
	char tmp[BUFFER_SIZE];

	scanf("%s", tmp);
	scanf("%s", fileName);
	FILE*fp = fopen(fileName, "w");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
	}
	for (i = 0; i < n; i++) {
		fprintf(fp, "%s %s\n", names[i], numbers[i]);
	}fclose(fp);
}
void add() {
	char buf1[BUFFER_SIZE], buf2[BUFFER_SIZE];
	scanf("%s", buf1);
	scanf("%s", buf2);

	int i = n - 1;
	while (i >= 0 && strcmp(names[i], buf1) > 0) {
		names[i + 1] = names[i];
		numbers[i + 1] = numbers[i];
		i--;
	}names[i + 1] = strdup(buf1);
	numbers[i + 1] = strdup(buf2);
	n++;
	printf("%s was added successfully.\n", buf1);
}
void remove() {
	char buf[BUFFER_SIZE];
	scanf("%s", buf);
	int index = search(buf);
	if (index = -1) {
		printf("No person named '%s' exists.\n", buf);
		return;
	}
	int j = index;
	for (; j < n - 1; j++) {
		names[j] = names[j + 1];
		numbers[j] = numbers[j + 1];
	}n--;
	printf("'%s' was deleted successfully.\n", buf);
}
void find() {
	char buf[BUFFER_SIZE];
	scanf("%s", buf);
	int index = search(buf);
	if (index == -1) printf("No person named '%s' exists.\n", buf);
	else printf("%s\n", numbers[index]);
}
int search(char *name) {
	int i;
	for (i = 0; i < n; i++) {
		if (strcmp(name, names[i]) == 0) { return i; }
	}return -1;

}
void status() {
	int i;
	for (i = 0; i < n; i++) {
		printf("%s %s\n", names[i], numbers[i]);
	}printf("Total %d person.\n", n);
}
void findall() {
	char buf[BUFFER_SIZE]; int count = 0;
	scanf("%s", buf);
	int length = strlen(buf);
	for (int i = 0; i < n; i++) {
		if (!strncmp(names[i], buf, strlen(buf))) {
			printf("%s %s\n", names[i], numbers[i]); count++;
		}
	}printf("%d persons found.\n", count);
}
void deleteall() {
	char buf[BUFFER_SIZE];
	int ch = 0, a = 0;
	scanf("%s", buf);
	int cut = 0;
	int number = 0;
	char answer[BUFFER_SIZE];
	for (int i = 0; i < n; i++) {
		int count = 0;
		char buffer[BUFFER_SIZE];
		strcpy(buffer, names[i]);
		for (int j = 0; count <= strlen(buf) && j < strlen(buf); j++) {
			if (buf[j] == buffer[j])
				count++;
			if (count == strlen(buf))
			{
				printf("Do you want to delete '%s'?", names[i]);
				if (number == 0)
					ch = getchar();
				number++;
				while ((ch = getchar()) != '\n')
					answer[a++] = ch;
				answer[a] = '\0';
				if (strcmp(answer, "yes") == 0)
				{
					cut++;
					printf("%s was deleted.\n", names[i]);
					for (int o = i; o < n - 1; o++) {
						names[o] = names[o + 1];
						numbers[o] = numbers[o + 1];
					}
					i--;
					n--;
					a = 0;
				}
				else if (strcmp(answer, "yes") != 0 || strlen(answer) == 0) {//
					printf("%s was not deleted.\n", names[i]);
					a = 0;
				}
			}
		}
	}
	printf("%d persons deleted.\n", cut);
}

3.
#pragma warning(disable:4996)
#include<stdio.h>
#include<string.h>
#define MAX 81

FILE*fp = fopen("harry.txt", "r");
FILE*fp_out = fopen("aligned.txt", "w");
char *first[100000];
int first_letter = 0;

int eighty_letters();

int main(void) {
	int eighty = eighty_letters();
	while (1) {
		if (eighty == 1)
			break;
		eighty = eighty_letters();
	}
	fclose(fp);
	fclose(fp_out);
}


int eighty_letters() {
	int length = 0, num = 0, enter, last = 0;
	char*words[100], buffer[100];
	if (first_letter != 0 && strlen(first[first_letter - 1]) != 0) {
		words[num] = first[first_letter - 1];
		length += (strlen(words[num++]) + 1);
	}
	fscanf(fp, "%s", buffer);
	while (length < MAX) {
		words[num] = strdup(buffer);
		length += (strlen(words[num++]) + 1);
		if (fscanf(fp, "%s", buffer) == EOF) {
			last = 1;
			break;
		}
		if (strlen(buffer) >= (MAX - length)) {
			break;
		}
	}
	enter = MAX - length;
	if (last == 1)
		enter = 0;
	int count = 0;
	for (int i = 0; i < num; i++) {
		fprintf(fp_out, "%s", words[i]);
		if (i != num - 1)
			fprintf(fp_out, " ");
		if (enter > 0 && count < enter) {
			fprintf(fp_out, " ");
			count++; length++;
		}
	}
	if (last == 1)
		return 1;
	fprintf(fp_out, "\n");
	first[first_letter++] = strdup(buffer);
	return 0;
}