2.
#pragma warning(disable:4996)
#include<stdio.h>
#define MAX 100

int find(int a[], int n, int k);
void insert(int a[], int n, int k);

int main(void)
{
	int n = 0, k;
	int a[MAX];
	int index;

	while (1)
	{
		scanf("%d", &k);
		if (k == -1)
			break;
		index = find(a, n, k);
		if (index != -1)
			printf("duplicate entry: %d\n", index);
		else {
			insert(a, n, k);
			n++;
			for (int i = 0; i < n; i++)
				printf("%d ", a[i]);
			printf("\n");
		}
	}
	return 0;
}

int find(int a[], int n, int k)
{
	for (int i = 0; i < n; i++) {
		if (a[i] == k)
			return i;
	}
	return -1;
}

void insert(int a[], int n, int k)
{
	int i = n - 1;
	while (i >= 0 && a[i] > k) {
		a[i + 1] = a[i];
		i--;
	}
	a[i + 1] = k;
}

3.
#pragma warning(disable:4996)
#include <stdio.h> 
#include<stdbool.h>
#define MAX 1000

bool intersect(int p, int q, int x1[], int y1[], int x2[], int y2[]);
void insertion_sort(int n, int xx[], int yy[]);
int findAllIntersections(int n, int x1[], int y1[], int x2[], int y2[], int xx[], int yy[]);

int main(void) {
	int x1[MAX], y1[MAX], x2[MAX], y2[MAX];
	int xx[MAX], yy[MAX];
	int n = 0;
	FILE *fp = fopen("input3.txt", "r");
	fscanf(fp, "%d", &n);
	while (fscanf(fp, "%d %d %d %d", &x1[n], &y1[n], &x2[n], &y2[n]) != EOF) {
		n++;
	}
	fclose(fp);
	int count = findAllIntersections(n, x1, y1, x2, y2, xx, yy);
	insertion_sort(count, xx, yy);
	for (int i = 0; i < count; i++)
		printf("[%d, %d]\n", xx[i], yy[i]);

	return 0;
}
int findAllIntersections(int n, int x1[], int y1[], int x2[], int y2[], int xx[], int yy[]) {
	int count = 0;
	for (int p = 0; p < n; p++) {
		for (int q = p + 1; q < n; q++) {
			if (!intersect(p, q, x1, y1, x2, y2))
				continue;
			if (x1[p] == x2[p]) {
				xx[count] = x1[p];
				yy[count++] = y1[q];
			}
			else {
				xx[count] = x1[q];
				yy[count++] = y1[p];
			}
		}
	}
	return count;
}

bool intersect(int p, int q, int x1[], int y1[], int x2[], int y2[]) {
	if (x1[p] == x2[p] && x1[q] == x2[q] || y1[p] == y2[p] && y1[q] == y2[q])
		return false;
	if (x1[p] == x2[p] && x1[q] <= x1[p] && x2[q] >= x1[p] && y1[p] <= y1[q] && y2[p] >= y1[q])
		// p is vertical
		return true;
	else if (x1[p] <= x1[q] && x2[p] >= x1[q] && y1[q] <= y1[p] && y2[q] >= y1[p])
		return true;
	return false;
}
void insertion_sort(int count, int xx[], int yy[]) {
	for (int i = 1; i < count; i++) {
		int tmpx = xx[i];
		int tmpy = yy[i];
		int j = i - 1;
		while (j >= 0 && (xx[j] > tmpx || xx[j] == tmpx && yy[j] > tmpy)) {
			xx[j + 1] = xx[j];
			yy[j + 1] = yy[j];
			j--;
		}
		xx[j + 1] = tmpx;
		yy[j + 1] = tmpy;
	}
}

5.
#pragma warning(disable:4996)
#include <stdio.h> 
#include<stdbool.h>
#define MAX 1000 

bool check(int n, int traj[][2], int x, int y);
bool cross(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);

int main(void) {
	int offset[][2] = { { 0, 1 },{ 1, 0 },{ 0, -1 },{ -1, 0 } };
	int n = 1;
	int trajectory[MAX][2];
	int dir, dist, lastDir = -1;
	int x = 0, y = 0;
	trajectory[0][0] = 0, trajectory[0][1] = 0;
	while (1) {
		scanf("%d %d", &dir, &dist);
		if (dir == -1) 
			break;
		int nextX = x + dist * offset[dir][0];
		int nextY = y + dist * offset[dir][1];
		if (lastDir != -1 && (dir + 2) % 4 == lastDir || !check(n, trajectory, nextX, nextY))
			printf("invalid move\n");
		else {
			trajectory[n][0] = x = nextX;
			trajectory[n++][1] = y = nextY;
			lastDir = dir;
			printf("%d %d\n", x, y);
		}
	}
	return 0;
}

bool cross(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
	bool same12 = (x1 == x2), same34 = (x3 == x4);   
	if (same12 && y1 > y2) {
		int tmp = y1; y1 = y2; y2 = tmp;
	}
	else if (!same12 && x1 > x2) {
		int tmp = x1; x1 = x2; x2 = tmp;
	}
	if (same34 && y3 > y4) {
		int tmp = y3; y3 = y4; y4 = tmp;
	}
	else if (!same34 && x3 > x4) {
		int tmp = x3; x3 = x4; x4 = tmp;
	}
	if (same12 && same34)
		return !(x1 != x3 || y2 < y3 || y4 < y1);
	else if (same12 && !same34)
		return  (x3 <= x1 && x1 <= x4 && y1 <= y3 && y3 <= y2);
	else if (!same12 && same34)
		return (x1 <= x3 && x3 <= x2 && y3 <= y1 && y1 <= y4);
	else
		return !(y1 != y3 || x2 < x3 || x4 < x1);
}

bool check(int n, int traj[][2], int x, int y) {
	for (int i = 1; i < n - 1; i++)
		if (cross(traj[i - 1][0], traj[i - 1][1], traj[i][0], traj[i][1], traj[n - 1][0], traj[n - 1][1], x, y))            
			return false;
	return true;
}